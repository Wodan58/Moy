 usrlib  is loaded
 inilib  is loaded
 agglib  is loaded
	0 __settracegc.
	
	(* R E C U R S I V E   D E F I N I T I O N  *)
	
	(*
	    fact(n) =
		IF n = 0
		THEN 1
		ELSE  n * fact(n-1)
	*)
	DEFINE
	    r-fact ==
		[ dup null ]
		[ pop 1]
		[ dup pred r-fact *]
		ifte.
	
	[ 0 1 2 3 4 5 6 ]  [r-fact]  map.
[ 1 1 2 6 24 120 720 ] 
	
	(*
	    mcc91(i) =
		IF i > 100
		THEN i - 10
		ELSE mcc91(mcc91(i + 11))
	*)
	DEFINE
	    r-mcc91 ==
		[ dup 100 > ]
		[ 10 - ]
		[ 11 + r-mcc91 r-mcc91 ]
		ifte.
	
	[ -7 42 99 100 101 102 345 ]  [r-mcc91]  map.
[ 91 91 91 91 91 92 335 ] 
	
	(*
	    ack(m, n) =
		IF m = 0  THEN n + 1
		ELSEIF n = 0  THEN ack(m - 1, 1)
		ELSE ack(m - 1, ack(m, n - 1))
	*)
	DEFINE
	    r-ack ==
	#	stack putln
		[ [ [over null]  popd succ ]
		  [ [dup null]  pop pred 1 r-ack ]
		  [ [dup pred swap] dip pred r-ack r-ack ] ]
		cond.
	
	[ [0 0] [0 1] [0 2] [0 3] [0 4] [0 5] ]   [i r-ack]  map  putln
	[ [1 0] [1 1] [1 2] [1 3] [1 4] [1 5] ]   [i r-ack]  map  putln
	[ [2 0] [2 1] [2 2] [2 3] [2 4] [2 5] ]   [i r-ack]  map  putln
	[ [3 0] [3 1] [3 2] [3 3] [3 4] [3 5] ]   [i r-ack]  map  putln
	[ [4 0]                               ]   [i r-ack]  map  putln.
[ 1 2 3 4 5 6 ] 
[ 2 3 4 5 6 7 ] 
[ 3 5 7 9 11 13 ] 
[ 5 13 29 61 125 253 ] 
[ 13 ] 
	
	# In the Towers of Hanoi puzzle the disks have to be moved
	# in a particular order. Ignoring what the target peg is,
	# for three disks the order is 1 2 1 3 1 2 1.
	# In general for n disks it is a sequence of (2^n)-1 steps.
	# The sequence of steps is also one that performs a
	# Hamiltonian path on an n-dimensional hypercube.
	# The following is the Joy program:
	
	DEFINE
	    r-hamilhyp ==   #  [] n  =>  [...]
		[ dup null ]
		[ pop ]
		[ dup rollup pred       r-hamilhyp
		  dupd cons swap pred   r-hamilhyp ]
		ifte.
	
	[]  3  r-hamilhyp.
[ 1 2 1 3 1 2 1 ] 
	[]  4  r-hamilhyp.
[ 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 ] 
	[]  5  r-hamilhyp.
[ 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 ] 
	
	(* S E L F - A P P L I C A T I O N     Reminder:  x == dup i    *)
	
	DEFINE
	    x-fact ==
		[ [ over null ]
		  [ pop pop 1]
		  [ [dup pred] dip x *]
		  ifte ]
		x.
	
	[ 0 1 2 3 4 5 6 ]  [x-fact]  map.
[ 1 1 2 6 24 120 720 ] 
	
	DEFINE
	    twice-x ==
		dup [x] dip x.
	DEFINE
	    x-mcc91 ==
		[ [ over 100 > ]
		  [ pop 10 - ]
		  [ [11 +] dip twice-x ]
		  ifte ]
		x.
	
	[ -7 42 99 100 101 102 345 ]  [x-mcc91]  map.
[ 91 91 91 91 91 92 335 ] 
	
	(*
	    r-ack ==
	#	stack putln
		[ [ [pop null]  popd succ ]
		  [ [null]  pop pred 1 r-ack ]
		  [ [dup pred swap] dip pred r-ack r-ack ] ]
		cond.
	*)
	DEFINE
	    x-ack ==
		[ [ [ [2 pick null]  pop popd succ ]
		    [ [over null]  [pop pred 1] dip x ]
		    [ [[dup pred swap] dip pred] dip twice-x ] ]
		cond ]
		x.
	
	[ [3 0] [3 1] [3 2] [3 3] [3 4] [3 5] ]   [i x-ack]  map.
[ 5 13 29 61 125 253 ] 
	
	(* the following is for a non-recursive definition using the y-combinator *)
	DEFINE
	    y ==
		[dup cons] swoncat dup cons i;
	    twice-i ==
		dup [i] dip i.
	DEFINE
	    y-ack ==
		[ [ [ [2 pick null]  pop popd succ ]
		    [ [over null]  [pop pred 1] dip i ]
		    [ [[dup pred swap] dip pred] dip twice-i ] ]
		cond ]
		y.
	
	[ [3 0] [3 1] [3 2] [3 3] [3 4] [3 5] ]   [i y-ack]  map.
[ 5 13 29 61 125 253 ] 
	
	(*
	DEFINE
	    r-hamilhyp ==   #  [] n  =>  [...]
		[ null ]
		[ pop ]
		[ dup rollup pred       r-hamilhyp
		  dupd cons swap pred   r-hamilhyp ]
		ifte.
	*)
	DEFINE
	    x-hamilhyp ==
		[ [ over null ]
		  [ pop pop ]
		  [ dup [ [dup rollup pred] dip  x ] dip
		    [dupd cons] dip
		    [swap pred] dip  x ]
		  ifte ]
		x.
	
	[]  5  x-hamilhyp.
[ 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 ] 
	
	(* P A R T I A L L Y   E X P L I C I T   R E C U R S I O N  *)
	
	# Nick Forde suggested writing the Ackermann function by using
	# the linrec combinator to achieve one recursion, and to use
	# explicit recursion for the other. For reasons that do not concern
	# us here, his version computes the _converse_ of the text book
	# definition:
	
	DEFINE ack == (* I:n I:m -> I:a *)
	    [ [ [dup 0 =] [pop 1 +] ]
	      [ [over 0 =] [popd 1 - 1 swap] [] ]
	      [ [dup rollup [1 -] dip] [swap 1 - ack] ] ]
	    condlinrec.
	
	[ [0 0] [0 1] [0 2] [0 3] [0 4] [0 5] ]   [i swap ack]  map  putln.
[ 1 2 3 4 5 6 ] 
	[ [1 0] [1 1] [1 2] [1 3] [1 4] [1 5] ]   [i swap ack]  map  putln.
[ 2 3 4 5 6 7 ] 
	[ [2 0] [2 1] [2 2] [2 3] [2 4] [2 5] ]   [i swap ack]  map  putln.
[ 3 5 7 9 11 13 ] 
	[ [3 0] [3 1] [3 2] [3 3] [3 4] [3 5] ]   [i swap ack]  map  putln.
[ 5 13 29 61 125 253 ] 
	[ [4 0]                               ]   [i swap ack]  map  putln.
[ 13 ] 
	
	(*
	DEFINE
	    r-mcc91 ==
		[ 100 > ]
		[ 10 - ]
		[ 11 + r-mcc91 r-mcc91 ]
		ifte.
	*)
	DEFINE
	    l-mcc91 ==
		[ dup 100 > ]
		[ 10 - ]
		[ 11 + ]
		[ l-mcc91 ]
		linrec.
	
	[ -7 42 99 100 101 102 345 ]  [l-mcc91]  map.	(* R.W. *)
[ 91 91 91 91 91 92 335 ] 
	
	(*
	    r-ack ==
	#	stack putln
		[ [ [pop null]  popd succ ]
		  [ [null]  pop pred 1 r-ack ]
		  [ [dup pred swap] dip pred r-ack r-ack ] ]
		cond.
	*)
	DEFINE
	    clr-ack ==
		[ [ [over null]  [popd succ] ]
		  [ [dup null]  [pop pred 1]  [] ]
		  [ [[dup pred swap] dip pred]  [clr-ack] ] ]
		condlinrec.
	
	[ [3 0] [3 1] [3 2] [3 3] [3 4] [3 5] ]   [i clr-ack]  map.
[ 5 13 29 61 125 253 ] 
	
	(*
	DEFINE
	    r-hamilhyp ==   #  [] n  =>  [...]
		[ null ]
		[ pop ]
		[ dup rollup pred       r-hamilhyp
		  dupd cons swap pred   r-hamilhyp ]
		ifte.
	*)
	DEFINE
	    lr-hamilhyp ==
		[ dup null ]
		[ pop ]
		[ dup rollup pred ]
		[ dupd cons swap pred lr-hamilhyp ]
		linrec.
	
	[]  5  lr-hamilhyp.
[ 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 ] 
	
	DEFINE
	    toggle ==   #   {..} i  ->  {..}
		[over over has]  [[not] dip swons not]  [swons]  ifte.
	
	{}  4  toggle.
{4} 
	{1 2 7}  2 toggle.
{1 7} 
	
	DEFINE
	    lr-grayseq ==
		[ dup null ]
		[ pop ]
		[ dup rollup pred ]
		[ dupd
		  dup [first swap toggle] dip  # inserted line
		  cons swap pred lr-grayseq ]
		linrec.
	
	[{}]  3  lr-grayseq.
[ {3} {1 3} {1 2 3} {2 3} {2} {1 2} {1} {} ] 
	[{3}]  3  lr-grayseq.
[ {} {1} {1 2} {2} {2 3} {1 2 3} {1 3} {3} ] 
	[{1 2 3}]  3 lr-grayseq.
[ {1 2} {2} {} {1} {1 3} {3} {2 3} {1 2 3} ] 
	
	(* N E S T E D  R E C U R S I O N   C O M B I N A T O R :  condnestrec  *)
	
	DEFINE
	    cnr-hamilhyp ==
		[ [ [dup null] [pop] ]
		  [ [dup rollup pred]
		    [dupd cons swap pred]
		    [] ] ]
		condnestrec.
	
	[] 4 cnr-hamilhyp.
[ 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 ] 
	
	DEFINE
	    cnr-ack ==
		[ [ [over null]  [popd succ] ]
		  [ [dup null]  [pop pred 1]  [] ]
		  [ [[dup pred swap] dip pred]  []  [] ] ]
		condnestrec.
	
	3 4 cnr-ack.
125 
	
	DEFINE
	    cnr-grayseq ==
		[ [ [dup null]  [pop] ]
		  [ [dup rollup pred]
		    [dupd
		     dup [first swap toggle] dip # inserted
		     cons swap pred]
		    [] ] ]
		condnestrec.
	
	[{}] 3 cnr-grayseq.
[ {3} {1 3} {1 2 3} {2 3} {2} {1 2} {1} {} ] 
	
	DEFINE
	    cnr-hanoi ==
		[[rolldown] infra] dip
		[ [ [dup null] [pop pop] ]
		  [ [dup2 [[rotate] infra] dip pred]
		    [ [dup rest put] dip
		      [[swap] infra] dip pred ]
		    [] ] ]
		condnestrec.
	
	[source destination temp]  2  cnr-hanoi newline.		(* R.W. *)
[ source temp ] [ source destination ] [ temp destination ] 
	[S D T]  5  cnr-hanoi newline.					(* R.W. *)
[ S D ] [ S T ] [ D T ] [ S D ] [ T S ] [ T D ] [ S D ] [ S T ] [ D T ] [ D S ] [ T S ] [ D T ] [ S D ] [ S T ] [ D T ] [ S D ] [ T S ] [ T D ] [ S D ] [ T S ] [ D T ] [ D S ] [ T S ] [ T D ] [ S D ] [ S T ] [ D T ] [ S D ] [ T S ] [ T D ] [ S D ] 
	
	DEFINE
	    cnr-fact ==
		[ [ [dup null] [pop 1] ]
		  [ [dup pred] [*] ] ]
		condnestrec;
	    cnr-mcc91 ==
		[ [ [dup 100 >] [10 -] ]
		  [ [11 +] [] [] ] ]
		condnestrec.
	
	[ 0 1 2 3 4 5 6 ]  [cnr-fact]  map.
[ 1 1 2 6 24 120 720 ] 
	[ -7 42 99 100 101 102 345 ]  [cnr-mcc91]  map.
[ 91 91 91 91 91 92 335 ] 
	
	# Using condnestrec for ordinary conditionals:
	
	DEFINE
	    cnr-even ==
		[ [ [dup 2 rem null] [pop true] ]
		  [ [pop false] ] ]
		condnestrec;
	    cnr-abs ==
		[ [ [dup 0 <] [0 swap -] ]
		  [ [] ] ]
		condnestrec.
	
	3 cnr-even.
false 
	4 cnr-even.
true 
	-5 cnr-abs.
5 
	6 cnr-abs.
6 
	(* end of file *)
