(*
    module  : lsptst.joy
    version : 1.4
    date    : 06/18/22
*)
DEFINE
nl == '\n putch;
# dup2 == dupd dup swapd;
swoncat == swap concat;
sequor == [pop true] swap ifte;
second == rest first;
putstrings == [putchars] step;
prime == 2 [[dup * >] nullary [rem 0 >] dip and] [succ] while dup * <;
numerical == [integer] [float] sequor;
selfeval == [numerical] [string] sequor;
joy0 == [/ - * + and or < > map prime filter include pred];
l-prompt == (* "> " putchars *) get;
lib0 == [[[FOLDR] [CLOSURE lib0 [lis ini bin] IF [NULL lis] ini
		      [bin [CAR lis] [FOLDR [CDR lis] ini bin]]]]
	 [[FOLDL] [CLOSURE lib0 [lis ini bin] IF [NULL lis] ini
		      [FOLDL [CDR lis] [bin [CAR lis] ini] bin]]]
	 [[FOLDR2] [CLOSURE lib0 [l1 l2 ini tern] IF [or [NULL l1]
		       [NULL l2]] ini [tern [CAR l1] [CAR l2]
		       [FOLDR2 [CDR l1] [CDR l2] ini tern]]]]
	 [[RECFOLDR] [CLOSURE lib0 [x y bin] IF [ATOM x] [bin x y]
			 [IF [NULL x] y [RECFOLDR [CAR x]
			 [RECFOLDR [CDR x] y bin] bin]]]]];
lisp == ["\nLisp interpreter\n" "\t\tTo include the Lisp library, type\n"
	  "\t\t\t[include  \"OK\"  \"lsplib.lsp\"]\n" "GO\n\n"] putstrings
	joy0 lib0 l-prompt [dup [EXIT] first equal not] [eval put nl l-prompt]
	while pop pop "exit from Lisp interpreter\n" putchars;
eval == # dup2 swap "eval: env = " putchars put nl
	#           "      exp = " putchars put nl
	[list]				 (* eval-compound      *)
	[unswons			 (* env args fun       *)
	  [[QUOTE first]
	    [LAMBDA dupd cons [CLOSURE] swoncat]
	    [IF				 (* env [[i] [t] [e]]  *)
	      uncons [eval] dip		 (* env e-i [[t] [e]]  *)
	      swap			 (* env [[t] [e]] e-i  *)
	      [null]
	      [pop second]		 (* env [e]            *)
	      [pop first]		 (* env [t]            *)
	      ifte eval ]
	    [DEF			 (* env [name body]    *)
	      uncons first swap		 (* env body name      *)
	      [eval]			 (* env e-b            *)
	      dip			 (* env e-b name       *)
	      dup			 (* env e-b n n        *)
	      [[[] cons] unary2		 (* env [e-b] [n]      *)
		swons			 (* env [[n] e-b]      *)
		swons]			 (* [[[n] e-b] env]    *)
	      dip]			 (* new-env n          *)
	    [DEFUN			 (* e [name vars body] *)
	      uncons			 (* e n [vs b]         *)
	      [LAMBDA] swoncat		 (* e n [L vs b]       *)
	      [] cons cons		 (* e [n [L vs b]]     *)
	      [DEF] swoncat		 (* e [D n [L vs b]]   *)
	      eval]
	    [(* DEFAULT *)
	      swons [eval] map unswons	 (* env ev-args ev-fun *)
	      apply]]
	  case]
	[[selfeval]			 (* eval-atomic        *)
	  []				 (* self-evaluating    *)
	  [dupd swap			 (* env v env          *)
	    [[null]			 (* member ?           *)
	      [true]			 (* fake               *)
	      [first first in]		 (* really ?           *)
	    ifte]
	  [[null]			 (* was fake ?         *)
	    [pop]			 (* self-evaluating    *)
	    [first unswons rolldown	 (* [e1..] [v1..] v    *)
	    [[first] dip =]
	    [pop pop first]
	    [[[rest] unary2] dip]
	    tailrec]
	  ifte]
	[rest]
	tailrec]			 (* end lookup         *)
      ifte]				 (* end eval-atomic    *)
    ifte;				 (* end eval           *)
call == [] cons i;
apply == # dup2 "apply: fun = " putchars put nl
	 #      "      args = " putchars put nl
	 [list]
	 [unswons			 (* apply-compound *)
	   [[CLOSURE			 (* args [e v body] *)
	       unswons call swons
	       uncons swapd uncons	 (* dissect the closure *)
	       [swap cons swons]	 (* build/install new frame *)
	       dip eval popd]		 (* new-env body restore old env *)
	     ["apply: unknown procedure type -\n"
	       putchars abort]]
	   case]
	 [				 (* apply-atomic *)
	   [selfeval]			 (* self-evaluating *)
	   []
	   [[[CAR first first]
	     [CDR first rest]
	     [CONS uncons first cons]
	     [EQ uncons first =]
	     [ATOM first leaf]
	     [NULL first null]
	     [LIST (* do nothing *)]
	     [(* try Joy: *)
	       [i] dip call]]
	   case]
	 ifte]
       ifte;				 (* end apply *)
END

"\ntesting the Lisp interpreter lisp in the library  lsplib.joy\n" putchars.
lisp quit.

123.456
false
"hello world"
[QUOTE [Peter Paul Mary]]
[QUOTE [1 2 3 4 5]]
[CAR [QUOTE [Peter Paul Mary]]]
[CDR [QUOTE [1 2 3 4 5]]]
[CONS Fred [QUOTE [Peter Paul]]]
[ATOM Fred]
[ATOM [QUOTE [1 2 3]]]
[NULL [QUOTE [1 2 3]]]
[NULL [QUOTE []]]
[EQ 2 3]
[LIST [CDR [QUOTE [1 2 3]]] [ATOM 123]]
[[LAMBDA [lis] CAR [CDR lis]] [QUOTE [11 22 33]]]
[+ [* 2 5] [- 10 7]]
[and true false]
[or true false]
[> 3 4]
[and [NULL [QUOTE []]] [NULL [QUOTE [Bob]]]]
[map [QUOTE [10 11 12 13 14 15 16]] [QUOTE [prime]]]
[filter [QUOTE [10 11 12 13 14 15 16]] [QUOTE [prime]]]
[include "OK" "lsptst.lsp"]
EXIT
