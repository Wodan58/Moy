111 222 + .
1 2 + 3 4 + * .
2 2 + 2 2 * = .
6 6 * 5 7 * > .
true false or true and not .
DEFINE	reverse == [] swap shunt ;
	shunt == [cnos] step ;
	cnos == swap cons .
[1 2 3 4 5] reverse .
DEFINE	concat1 == [reverse] c shunt ;
	c == [swap] dip i .
[peter paul] [mary jane] concat1 .
DEFINE	last == dup rest1 null1 [first1] [rest1 last] branch1 ;
	rest1 == uncons swap pop ;
	null1 == 0 = ;	(* car nothing sametype *)
	car == uncons pop ;
	first1 == uncons pop ;
	branch1 == swap pair index i ;
	pair == [] cons cons .
[11 false 'X 44] last .
DEFINE	member == swap contains ;
	contains == false swap [= or] cons fold1 ;
	fold1 == [swap] dip step .
3 [1 5 3 4 2] member .
3 [1 5 6 4 2] member .
DEFINE	sum == 0 [+] fold1 ;
	space == 32 ;
	product == 1 [*] fold1 .
[1 2 3 4] dup sum put space putch product .
111 [222 333] cons .
DEFINE	putsp == put space putch ;
	newline == '\n putch ;
	putln == put newline .
[11 22 33 44 55] uncons uncons putsp putsp putsp newline .
['a 'b] ['d 'e 'f] concat1 dup .
uncons uncons 'c swap cons cons cons dup .
DEFINE	length == 0 [pop 1 +] fold1 .
dup length .
reverse length .
#get get + .
#123 456
111 222 [+ putln] i .
111 [putln +] reverse 222 swap i .
3 7 100 [*] dip + .
[1 2 3] [dup * putsp] step newline .
2 [dup *] i .
DEFINE	twice == dup b ;
	b == [i] dip i .
2 [dup *] twice .
DEFINE	thrice == dup [twice] dip i .
2 [dup *] thrice .
DEFINE	square == dup * ;
	times1 == dup 0 = [pop pop] [[dup [i] dip] dip pred times1] branch1 .
2 [square] 0 times1 .
2 [square] 1 times1 .
2 [square] 2 times1 .
2 [square] 3 times1 .
2 [square] 4 times1 .
2 [square] 5 times1 .
[7] 10 times1 stack .
DEFINE	map1 == maprev reverse ;
	maprev == [] rollup1 shuntmap ;
	rollup1 == swap [swap] dip ;
	shuntmap == [[cnos] b] cons step .
[1 2 3] [dup *] map1 .
[1 2 3] 0 [dup * +] fold1 .
DEFINE	unit == [] cons ;
	construct2 == [[nullary1] cons dip swap] map1 ;
	nullary1 == stack swap dip rest1 cons unstack .
11 12 [[+] [*] [pop unit] [dup pair]] construct2 .
DEFINE	unpair == uncons uncons pop .
[[pair [square] map1 unpair +] [pop] []] construct2 .
[] unstack 11111 .
64 .
64 .
255 .
'\065 .
'\097 .
'g .
[Smith Jones Robinson] last .
DEFINE	definition == first1 body .
#[last] definition .
#[Smith Jones Robinson] [last] definition i .
DEFINE	cdr == uncons swap pop ;
	x1 == dup i .
[Smith Jones Robinson]
[swap dup rest1 null1 [car swap pop] [cdr swap x1] branch1] x1 . 
DEFINE	y1 == fix i ;
	fix == [duco] first1 swap cons duco ;
	duco == dup cons .
[Smith Jones Robinson]
[swap dup rest1 null1 [car swap pop] [cdr swap i] branch1] y1 .
DEFINE	factorial_rec == dup 1 <= [pop 1] [dup pred factorial_rec *] branch1 .
6 factorial_rec .
DEFINE	rolldown1 == [swap] dip swap .
6 [swap dup 1 <= [pop pop 1] [dup pred rolldown1 x1 *] branch1] x1 .
6 [swap dup 1 <= [pop pop 1] [dup pred rolldown1 i *] branch1] y1 .
DEFINE	quicksort == dup small [] [partition quicksort [quicksort] dip concat1]
		     branch1 ;
	partition == [[] []] dip dup [first1 > [cnos] [swap [cnos] dip] branch1]
		     cons [dup] first1 cnos step .
[1 9 2 8 3 7 4 6 5] quicksort .
[5 6 4 7 3 8 2 9 1] quicksort .
[1 2 3 4 5 6 7 8 9] quicksort .
[9 8 7 6 5 4 3 2 1] quicksort .
#[quicksort] definition .
DEFINE	quicksort1 == dup small [] [partition1 quicksort1 [quicksort1] dip
		      concat1] branch1 ;
	partition1 == [[] []] dip dup first1 [first1 > [cnos] [swap [cnos] dip]
		      branch1] cons [first1] first1 cnos [dup] first1 cnos step.
[[1 Smith] [3 Jones] [2 Robinson] [4 Brown]] quicksort1 .
[] [NURKS Peter 1989 year 3 major Computer Science] cnos
   [ABELSON Mary 1990 year 2 major Logic] cnos
   [ZEEMAN Fred 1988 year 2 major Accounting] cnos
   [MORRIS Janna 1992 year 1 major undecided] cnos
quicksort1 dup [putln] step pop .
