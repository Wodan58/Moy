%INCLUDE stdlib.joy

DEFINE
vv-samesize == [ size ] dip size = ;
vv-bin-v == mapr2 ;
vv-bin-m == [ map popd ] cons cons map ;
vv-2bin-s == [ mapr2 uncons ] dip step ;
vs-bin-v == cons map ;
v-zdiag-m == [ dup small_lst ] [ [ dup null ] [ ] [ [ ] cons ] ifte ] [ uncons ]
[ dup [ first rest 0 swons cons ] dip [ 0 swons ] map cons ] linrec ;
v-negate-v == 0.0 swap [ over swap .- ] sv-bin-v ;
v-invert-v == 1.0 swap [ over swap ./ ] sv-bin-v ;
v-e-diag-m == dup [ [ swons cons ] cons [ first rest ] swoncat ] dip [ swons ]
cons [ map cons ] cons [ dip ] swoncat cons [ dup ] swoncat [ [ dup small_lst ]
[ [ dup null ] [ ] [ [ ] cons ] ifte ] [ uncons ] ] dip linrec ;
v-1row-m == [ ] cons ;
v-1col-m == [ ] swap [ dupd swons ] sv-bin-v ;
unconsd == [ uncons ] dip ;
uncons2 == unconsd uncons swapd ;
transpose == [ dup [ dup null ] [ true ] [ [ dup null ] some ] ifte ] [ pop [ ]
] [ [ [ first ] map ] [ [ rest ] map ] cleave ] [ cons ] linrec ;
tandeg == radians tan ;
swoncat == swap concat ;
sv-bin-v == map popd ;
sm-bin-m == [ (* sv-bin-v *) map ] cons map popd ;
sindeg == radians sin ;
radians == pi .* 180.0 ./ ;
putlist == "[ " putchars [ dup null ] [ pop ] [ unswons "(dd)" put_list [ "\n  " putchars
put ] step ] ifte "]\n" putchars ;
putlist-set == "[ " putchars [ dup null ] [ pop ] [ unswons "(zz)" put_list [ "\n  "
putchars put ] step ] ifte "]\n" putchars ;
pop2 == pop pop ;
pi == 3.14159265 ;
pairstep == [ dupd ] swoncat [ step pop ] cons cons step ;
pairlist == [ ] cons cons ;
nulld == [ null ] dip ;
null2 == nulld null or ;
n-e-vector == [ ] cons [ times ] cons cons [ ] swap infra ;
ms-cbin-m == swapd sm-bin-m ;
ms-bin-m == cons [ map ] cons map ;
mm-vercat-m == concat ;
mm-mul-m == transpose [ [ [ [ * ] mapr2 ] unary 0 [ + ] fold ] map popd ] cons map ;
mm-fmul-m == transpose [ [ [ [ .* ] mapr2 ] unary 0.0 [ .+ ] fold ] map popd ] cons map ;
mm-horcat-m == [ concat ] mapr2 ;
mm-bin-m == [ mapr2 ] cons mapr2 ;
mm-add-m == [ + ] mm-bin-m ;
mm-2bin-m == [ fold ] cons [ [ [ mapr2 ] cons unary unswons ] cons ] dip concat
[ transpose ] dip [ map popd ] cons cons map ;
mapr2 == [ [ over over null2 ] [ pop2 [ ] ] [ uncons2 ] ] dip [ dip cons ] cons linrec ;
m-transpose-m == [ dup [ dup null ] [ true ] [ [ dup null ] some ] ifte ] [ pop
[ ] ] [ [ [ first ] map ] [ [ rest ] map ] cleave ] [ cons ] linrec ;
m-print == putlist ;
m-print-set == putlist-set ;
id2 == 2 1 n-e-vector 0 v-e-diag-m ;
dip2 == [ dip ] cons dip ;
cosdeg == radians cos ;
cartproduct == [ [ ] ] dip2 [ pairlist swap [ swons ] dip ] pairstep ;
END

0 setautoput .
"output from test file  mtrtst.joy  (* MATRICES and VECTORS *)\n" putchars .
"user input is indented by one tab\n" putchars .
5 "hello" n-e-vector put_list_str nl .
5 1 n-e-vector put_list_int nl .
5 [ 1 2 3 ] [ over + ] sv-bin-v put_list_int nl .
3.13 [ 10.0 20.0 30.0 ] [ over .* ] sv-bin-v put_list_dbl nl .
5 [ 1 2 3 4 5 6 7 8 9 10 ] [ over swap - ] sv-bin-v put_list_int nl .
[ 1 2 3 4 5 6 7 8 9 10 ] 5 [ - ] vs-bin-v put_list_int nl .
[ { 1 2 3 } { 4 5 6 } { 7 8 9 } ] { 2 4 6 8 } [ and ] vs-bin-v put_list_set nl .
3.14 [ [ dup ] [ dup dup .* ] [ dup dup dup .* .* ] ] [ i ] sv-bin-v put_list_dbl nl .
[ 1 2 3 4 ] [ dup ] [ * ] concat [ i ] vs-bin-v put_list_int nl .
[ 1.1 2.2 3.3 4.4 5.5 ] v-negate-v put_list_dbl nl .
[ 1.1 2.2 3.3 4.4 5.5 ] v-invert-v put_list_dbl nl .
[ 1 2 3 4 ] [ 11 22 33 ] vv-samesize put_bool nl .
[ 1 2 3 4 ] [ 11 22 33 44 ] vv-samesize put_bool nl .
[ 1 2 3 ] [ 10 20 30 ] [ + ] vv-bin-v put_list_int nl .
[ 1 2 3 ] [ 10 20 30 ] [ * ] vv-bin-v put_list_int nl .
[ { 1 2 3 } { 2 3 4 } ] [ { 1 3 4 } { 4 5 6 } ] [ or ] vv-bin-v put_list_set nl .
[ { 1 2 3 } { 2 3 4 } ] [ { 1 3 4 } { 4 5 6 } ] [ and ] vv-bin-v put_list_set nl .
[ true false false true ] [ true true false false ] [ and ] vv-bin-v put_list_bool nl .
[ 1 2 3 ] [ 1 2 3 ] [ * ] [ + ] vv-2bin-s put_int nl .
[ 1.1 2.2 3.3 ] [ 3.3 4.4 5.5 ] [ .* ] [ .+ ] vv-2bin-s put_dbl nl .
[ { 1 2 3 } { 4 5 6 } ] [ { 2 3 } { 2 6 } ] [ and ] [ or ] vv-2bin-s put_dbl nl .
[ { 1 2 3 } { 4 5 6 } ] [ { 2 3 } { 2 6 } ] [ or ] [ and ] vv-2bin-s put_dbl nl .
[ { 1 2 3 } { 4 5 6 } ] [ { 2 3 } { 2 6 } ] [ and ] [ and ] vv-2bin-s put_set nl .
[ { 1 2 3 } { 4 5 6 } ] [ { 2 3 } { 2 6 } ] [ or ] [ or ] vv-2bin-s put_set nl .
[ true false true ] [ false true true ] [ and ] [ or ] vv-2bin-s put_set nl .
[ 1 2 3 4 ] v-1row-m put_set nl .
[ 1 2 3 4 ] v-1col-m "((i)(i)(i)(i))" put_list nl .
[ 1 2 3 4 ] v-zdiag-m "((iiii)(iiii)(iiii)(iiii))" put_list nl .
[ 1 2 3 4 ] 0 v-e-diag-m "((iiii)(iiii)(iiii)(iiii))" put_list nl .
[ "Peter" "Paul" "Mary" ] "" v-e-diag-m "((ttt)(ttt)(ttt))" put_list nl .
[ { 1 2 } { 3 4 5 } { 6 } ] { } v-e-diag-m "((zzz)(zzz)(zzz))" put_list nl .
4 1 n-e-vector v-zdiag-m "((iiii)(iiii)(iiii)(iiii))" put_list nl .
4 1 n-e-vector 0 v-e-diag-m "((iiii)(iiii)(iiii)(iiii))" put_list nl .
4 'i n-e-vector 'o v-e-diag-m "((cccc)(cccc)(cccc)(cccc))" put_list nl .
[ 1 2 3 ] [ 10 20 ] [ over + ] vv-bin-m "((ii)(ii)(ii))" put_list nl .
[ 1.1 2.2 ] [ 3.3 4.4 5.5 6.6 ] [ over .+ ] vv-bin-m "((dddd)(dddd))" put_list nl .
[ 1.1 2.2 ] [ 4.4 5.5 6.6 7.7 ] [ over .* ] vv-bin-m "((dddd)(dddd))" put_list nl .
[ { 1 2 3 } { 4 5 } ] [ { 1 } { 2 3 } { 3 4 } ] [ over or ] vv-bin-m
"((zzz)(zzz))" put_list nl .
[ { 1 2 3 } { 4 5 } ] [ { 1 } { 2 3 } { 3 4 } ] [ over and ] vv-bin-m
"((zzz)(zzz))" put_list nl .
[ 1 2 3 4 ] [ [ id ] [ dup * ] [ dup dup * * ] ] [ dupd i ] vv-bin-m
"((iii)(iii)(iii)(iii))" put_list nl .
[ 0.0 30.0 45.0 ] [ [ sindeg ] [ cosdeg ] [ tandeg ] ] [ dupd i ] vv-bin-m
"((ddd)(ddd)(ddd))" put_list nl .
[ peter paul ] [ [ smith ] [ jones ] ] [ over swap cons ] vv-bin-m
"(((yy)(yy))((yy)(yy)))" put_list nl .
[ peter paul ] [ [ smith ] [ jones ] ] [ over swap cons ] vv-bin-m size put_int nl .
[ peter paul ] [ smith jones ] cartproduct "((yy)(yy)(yy)(yy))" put_list nl .
[ peter paul ] [ smith jones ] cartproduct size put_int nl .
[ [ 1 2 ] [ 3 4 ] ] [ [ 5 6 ] [ 7 8 ] ] mm-vercat-m "((ii)(ii)(ii)(ii))" put_list nl .
[ [ 1 2 ] [ 3 4 ] ] [ [ 5 6 ] [ 7 8 ] ] mm-horcat-m "((iiii)(iiii))" put_list nl .
[ [ 1 2 3 ] [ 4 5 6 ] [ 7 8 9 ] [ 10 11 12 ] ] m-transpose-m "((iiii)(iiii)(iiii))"
put_list nl .
[ [ 1 2 ] [ 3 4 ] [ 5 6 ] ] 10 [ over + ] ms-cbin-m "((ii)(ii)(ii))" put_list nl .
[ [ 1 2 ] [ 3 4 ] [ 5 6 ] ] 10 [ over over - ] ms-bin-m "((ii)(ii)(ii))" put_list nl .
[ [ 1 2 ] [ 3 4 ] [ 5 6 ] ] 10 [ over * ] ms-cbin-m "((ii)(ii)(ii))" put_list nl .
[ [ 1 2 ] [ 3 4 ] [ 5 6 ] ] 0 [ over * ] ms-cbin-m "((ii)(ii)(ii))" put_list nl .
[ [ 1 2 ] [ 3 4 ] [ 5 6 ] ] 7 [ popd ] ms-bin-m "((ii)(ii)(ii))" put_list nl .
[ [ 1 2 ] [ 3 4 ] [ 5 6 ] ] [ succ ] [ i ] ms-bin-m "((ii)(ii)(ii))" put_list nl .
[ [ { 1 2 } { 3 4 } ] [ { 5 6 } { 7 8 } ] ] { 1 3 5 7 } [ and ] ms-bin-m "((ii)(ii))"
put_list nl .
5 [ [ 1 2 3 ] [ 4 5 6 ] [ 7 8 9 ] ] [ over swap - ] sm-bin-m "((iii)(iii)(iii))" put_list
nl .
[ [ 1 2 3 ] [ 4 5 6 ] [ 7 8 9 ] ] 5 [ over swap - ] ms-bin-m "((iii)(iii)(iii))" put_list
nl .
0 [ [ 1 2 3 ] [ 4 5 6 ] [ 7 8 9 ] ] [ pop dup ] sm-bin-m "((iii)(iii)(iii))" put_list nl .
[ [ 1 2 3 ] [ 4 5 6 ] ] [ [ 10 20 30 ] [ 40 50 60 ] ] mm-add-m "((iii)(iii))" put_list
nl .
[ [ 1 2 3 ] [ 4 5 6 ] ] [ [ 10 20 30 ] [ 40 50 60 ] ] [ + ] mm-bin-m "((iii)(iii))"
put_list nl .
[ [ 1 2 3 ] [ 4 5 6 ] ] [ [ 10 20 30 ] [ 40 50 60 ] ] [ * ] mm-bin-m "((iii)(iii))"
put_list nl .
[ [ true true ] [ false false ] ] [ [ true false ] [ true false ] ] [ or ]
mm-bin-m "((bb)(bb))" put_list nl .
[ [ true true ] [ false false ] ] [ [ true false ] [ true false ] ] [ and ]
mm-bin-m "((bb)(bb))" put_list nl .
[ [ true true ] [ false false ] ] [ [ true false ] [ true false ] ] [ xor ]
mm-bin-m "((bb)(bb))" put_list nl .
id2 "((ii)(ii))" put_list nl .
id2 m-transpose-m "((ii)(ii))" put_list nl .
id2 [ [ 1 2 3 ] [ 4 5 6 ] ] mm-mul-m "((iii)(iii))" put_list nl .
[ [ 1 2 ] [ 3 4 ] [ 5 6 ] ] id2 mm-mul-m "((ii)(ii)(ii))" put_list nl .
[ [ 1 2 ] [ 3 4 ] [ 5 6 ] ] id2 [ * ] [ + ] mm-2bin-m "((ii)(ii)(ii))" put_list nl .
[ [ 1.1 2.2 ] [ 3.3 4.4 ] [ 5.5 6.6 ] ] dup m-print [ [ 1.1 2.2 ] [ 3.3 4.4 ] ]
dup m-print mm-fmul-m m-print .
[ [ { 1 2 } { 3 4 } ] [ { 4 5 } { 6 7 } ] ] dup m-print-set [ [ { 1 3 5 } { 6 } ]
[ { 2 } { 3 4 5 } ] ] dup m-print-set [ and ] [ or ] mm-2bin-m m-print-set .
