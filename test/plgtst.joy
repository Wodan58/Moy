DEFINE
swoncat == swap concat ;
shunt == [ swons ] step ;
sequand == [ pop false ] ifte ;
second == rest first ;
s == swoncat ;
reverse == [ [ ] ] [ "" ] iflist swap shunt ;
r-show == Rev2Tre taut-show-all ;
putln == put newline ;
prs-trace == pop ;
p-show == Pol2Tre taut-show-all ;
newline == '\n putch ;
m-test == Min2Tre taut-test ;
m-show1 == Min2Tre taut-show-first ;
m-show == Min2Tre taut-show-all ;
m-count == Min2Tre taut-count ;
m-collect1 == Min2Tre taut-collect-first ;
m-collect == Min2Tre taut-collect-all ;
fib == [ 1 0 ] dip [ swap [ + ] unary ] times popd ;
fact == [ [ pop null ] [ [ pop 1 ] dip ] [ [ dup pred ] dip i [ * ] dip ] ifte
] ;
dipd == [ dip ] cons dip ;
big-formula == [ [ CEO-sells-shares imp insider-trading and traders-conspire ]
and [ i-trade-exposed imp CEO-resigns or CEO-is-sacked ] and [ CEO-resigns imp
i-trade-exposed and shares-drop ] and [ traders-conspire and CEO-is-sacked imp
sales-drop ] and [ sales-drop imp CEO-is-sacked and shares-drop ] imp [
CEO-sells-shares imp shares-drop ] ] ;
END
HIDE
show-first == pop "\tnot tautology, first countermodel:\n" putchars swap '\t
putch "T: " putchars put "  F: " putchars putln succ ;
show-all == pop [ [ dup null ] [ "\tnot tautology, countermodel(s):\n" putchars
] [ ] ifte "  " putchars succ dup put ] dipd swap '\t putch "T: " putchars put
"  F: " putchars putln ;
found == pop pop pop not ;
count == pop pop pop succ ;
collect == pop [ ] cons cons swons ;
IN
ver-first == [ 4 pick null ] [ "ver-first B" t-trace unswons [ [ [ dup [ or v A
] in ] pop [ [ ] cons cons cons dup ] dip uncons first [ swap [ [ i ] dip
ver-first ] dip ] dip [ i ] dip ver-first ] [ [ dup [ imp > C ] in ] pop [ [ ]
cons cons cons dup ] dip uncons first [ swap [ [ i ] dip fal-first ] dip ] dip
[ i ] dip ver-first ] [ [ dup [ iff = E ] in ] pop [ [ ] cons cons cons dup ]
dip dup [ [ and ] swoncat ] dip [ or ] swoncat [ swap [ [ i ] dip ver-first ]
dip ] dip [ i ] dip fal-first ] [ [ dup [ and & K ] in ] pop uncons first swap
[ [ ver-first ] cons swons ] dip ver-first ] [ [ dup [ not - N ] in ] pop first
fal-first ] [ popd [ 2 pick over has ] [ pop pop pop pop ] [ swap [ swapd [
over over has ] [ pop ] [ swons ] ifte swap ] dip unswons i ] ifte ] ] cond
"ver-first E" t-trace ] [ pop pop pop pop ] ifte ;
ver-all == "ver-all B" t-trace unswons [ [ [ dup [ or v A ] in ] pop [ [ ] cons
cons cons dup ] dip uncons first [ swap [ [ i ] dip ver-all ] dip ] dip [ i ]
dip ver-all ] [ [ dup [ imp > C ] in ] pop [ [ ] cons cons cons dup ] dip
uncons first [ swap [ [ i ] dip fal-all ] dip ] dip [ i ] dip ver-all ] [ [ dup
[ iff = E ] in ] pop [ [ ] cons cons cons dup ] dip dup [ [ and ] swoncat ] dip
[ or ] swoncat [ swap [ [ i ] dip ver-all ] dip ] dip [ i ] dip fal-all ] [ [
dup [ and & K ] in ] pop uncons first swap [ [ ver-all ] cons swons ] dip
ver-all ] [ [ dup [ not - N ] in ] pop first fal-all ] [ popd [ 2 pick over has
] [ pop pop pop pop ] [ swap [ swapd [ over over has ] [ pop ] [ swons ] ifte
swap ] dip unswons i ] ifte ] ] cond "ver-all E" t-trace ;
taut-test == [ false [ ] [ ] [ [ found ] ] ] dip fal-first not ;
taut-show-first == [ 0 [ ] [ ] [ [ show-first ] ] ] dip fal-first [ dup null ]
[ '\t putch "tautology\n" putchars ] [ ] ifte pop ;
taut-show-all == [ 0 [ ] [ ] [ [ show-all ] ] ] dip fal-all [ dup null ] [ '\t
putch "tautology\n" putchars ] [ ] ifte pop ;
taut-count == [ 0 [ ] [ ] [ [ count ] ] ] dip fal-all ;
taut-collect-first == [ [ ] [ ] [ ] [ [ collect ] ] ] dip fal-first ;
taut-collect-all == [ [ ] [ ] [ ] [ [ collect ] ] ] dip fal-all ;
t-trace == pop ;
fal-first == [ 4 pick null ] [ "fal-first B" t-trace unswons [ [ [ dup [ and &
K ] in ] pop [ [ ] cons cons cons dup ] dip uncons first [ swap [ [ i ] dip
fal-first ] dip ] dip [ i ] dip fal-first ] [ [ dup [ iff = E ] in ] pop [ [ ]
cons cons cons dup ] dip dup [ [ imp ] swoncat ] dip [ swap ] infra [ imp ]
swoncat [ swap [ [ i ] dip fal-first ] dip ] dip [ i ] dip fal-first ] [ [ dup
[ or v A ] in ] pop uncons first swap [ [ fal-first ] cons swons ] dip
fal-first ] [ [ dup [ imp > C ] in ] pop uncons first swap [ [ fal-first ] cons
swons ] dip ver-first ] [ [ dup [ not - N ] in ] pop first ver-first ] [ popd [
3 pick over has ] [ pop pop pop pop ] [ swap [ [ over over has ] [ pop ] [
swons ] ifte ] dip unswons i ] ifte ] ] cond "fal-first E" t-trace ] [ pop pop
pop pop ] ifte ;
fal-all == "fal-all B" t-trace unswons [ [ [ dup [ and & K ] in ] pop [ [ ]
cons cons cons dup ] dip uncons first [ swap [ [ i ] dip fal-all ] dip ] dip [
i ] dip fal-all ] [ [ dup [ or v A ] in ] pop uncons first swap [ [ fal-all ]
cons swons ] dip fal-all ] [ [ dup [ imp > C ] in ] pop uncons first swap [ [
fal-all ] cons swons ] dip ver-all ] [ [ dup [ iff = E ] in ] pop [ [ ] cons
cons cons dup ] dip dup [ [ imp ] swoncat ] dip [ swap ] infra [ imp ] swoncat
[ swap [ [ i ] dip fal-all ] dip ] dip [ i ] dip fal-all ] [ [ dup [ not - N ]
in ] pop first ver-all ] [ popd [ 3 pick over has ] [ pop pop pop pop ] [ swap
[ [ over over has ] [ pop ] [ swons ] ifte ] dip unswons i ] ifte ] ] cond
"fal-all E" t-trace ;
END
HIDE
parse-list-residues == pop [ succ dup put ": " putchars ] dip [ put ] step
newline ;
IN
prs-list-residues == Min2Tre [ [ 0 ] dip [ [ parse-list-residues ] ] ] dip
parse pop ;
parse == "parse B" prs-trace unswons [ [ [ dup [ | ] in ] pop [ [ ] cons cons
dup ] dip uncons first [ swap [ [ i ] dip parse ] dip ] dip [ i ] dip parse ] [
[ dup [ _ ] in ] pop uncons first swap [ [ parse ] cons swons ] dip parse ] [ [
dup [ ? ] in ] pop [ [ ] cons cons dup [ i unswons i ] dip ] dip [ i ] dip
first parse ] [ [ dup [ + ] in ] swons [ ] cons cons cons dup [ i second parse
] dip i dup [ [ parse ] cons swons ] dip second parse ] [ [ dup [ * ] in ]
swons [ [ ] cons cons dup [ i unswons i ] dip ] dip dup [ [ i ] dip [ parse ]
cons swons ] dip second parse ] [ [ dup [ $ ] in ] pop first i Min2Tre parse ]
[ [ dup [ QUOTE ] in ] pop first swap [ swons ] dip unswons i ] [ [ dup [
epsilon ] in ] pop pop unswons i ] [ popd [ dup 3 pick first = ] [ pop [ rest ]
dip unswons i ] [ pop pop pop ] ifte ] ] cond "parse E" prs-trace ;
END
HIDE
R2T == [ [ [ [ dup unops in ] [ [ ] cons ] dip swons ] [ [ dup binops in ] [ [
] cons cons ] dip swons ] [ [ dup list ] [ ] cons [ QUOTE ] swoncat ] [ [ ]
cons ] ] cond ] step ;
P2T == unswons [ [ [ dup unops in ] [ P2T [ ] cons ] dip swons ] [ [ dup binops
in ] [ P2T [ ] cons [ P2T [ ] cons ] dip swoncat ] dip swons ] [ [ dup list ] [
] cons [ QUOTE ] swoncat ] [ [ ] cons ] ] cond ;
IN
Rev2Tre == R2T ;
Pol2Tre == P2T popd ;
Min2Tre == unswons M12T popd ;
M42T == [ [ [ dup unops in ] [ unswons M42T [ ] cons ] dip swons ] [ [ dup [
QUOTE ] in ] [ unswons [ ] cons ] dip swons ] [ [ dup list ] unswons M12T popd
] [ [ ] cons ] ] cond ;
M32T == M42T [ over [ dup null not ] [ first bin3ops in ] sequand ] [ swap
uncons swapd unswons M32T rollupd [ ] cons cons cons ] [ ] ifte ;
M22T == M32T [ over [ dup null not ] [ first bin2ops in ] sequand ] [ swap
uncons swapd unswons M22T rollupd [ ] cons cons cons ] [ ] ifte ;
M12T == M22T [ over [ dup null not ] [ first bin1ops in ] sequand ] [ swap
uncons swapd unswons M12T rollupd [ ] cons cons cons ] [ ] ifte ;
END

DEFINE
    unops == [ not - N ] ;
    binops == [ imp > C  iff = E  or v A  and & K ] ;
    bin1ops == [ imp > C   iff = E ] ;
    bin2ops == [ or v A ] ;
    bin3ops == [ and & K ] ;
END

"\ntesting the propositional logic library in file  plglib.joy\n\n" putchars .
0 __settracegc .
# 1 setecho .
[ raining or not raining ] m-show .
[ raining or not windy ] m-show .
[ [ p and q ] imp [ p or q ] ] m-show .
[ [ p or q ] imp [ p and q ] ] m-show .
[ p and q imp p or q ] m-show .
[ p or q imp p and q ] m-show .
[ p and q and r imp p or r or q ] m-show .
[ p and q and r iff p or r or q ] m-show .
[ p & q & r & s > p v r v q v s ] m-show .
[ p & q & r & s = p v r v q v s ] m-show .
[ - p & - q > - [ p v q ] ] m-show .
[ - p v - p > - [ p v q ] ] m-show .
[ p > q > r > p & q & r ] m-show .
[ p > q > r > p & q & s ] m-show .
[ [ [ p > q ] > p ] > p ] m-show .
[ [ [ p > q ] > q ] > p ] m-show .
[ [ p & q v p & r ] = p & [ q v r ] ] m-show .
[ [ p & q v p & r ] = q & [ p v r ] ] m-show .
[ [ p v q ] & [ p > r ] & [ q > s ] > [ r v s ] ] m-show .
[ [ p v q ] & [ p > r ] & [ q > s ] > [ r & s ] ] m-show .
[ A p N p ] p-show .
[ A p N q ] p-show .
[ C C p q C N q N p ] p-show .
[ C C p q C N p N q ] p-show .
[ C K K A p q C p r C q s A r s ] p-show .
[ C K K A p q C p r C q s K r s ] p-show .
[ imp and imp p q imp q r imp p r ] p-show .
[ imp and imp p q imp p r imp q r ] p-show .
[ > v p & q r & v p q v p r ] p-show .
[ > v p & q r v & p q & p r ] p-show .
[ p not q not and r imp q p or not and r imp ] r-show .
[ p not q not and r imp q p and not and r imp ] r-show .
[ p & q & r > p v q v r ] m-show .
[ p v q v r > p & q & r ] m-show .
[ p v q v r > p & q & r ] m-show1 .
[ [ p > q ] & [ q > s ] > [ p > s ] ] m-collect .
[ [ p > q ] & [ q > s ] > [ s > p ] ] m-collect .
[ [ p > q ] & [ q > s ] > [ s > p ] ] m-collect1 .
[ [ p > q ] & [ r > s ] > [ [ p & r ] > [ q v s ] ] ] m-count .
[ [ p > q ] & [ r > s ] > [ [ p v r ] > [ q & s ] ] ] m-count .
[ [ p > q ] & [ r > s ] > [ [ p v r ] > [ q & s ] ] ] m-show .
[ [ p & q & r ] > [ p = q = r ] ] m-test .
[ [ p = q = r ] > [ p & q & r ] ] m-test .
[ [ p = q = r ] > [ p v q v r ] ] m-test .
[ [ p v q v r ] > [ p = q = r ] ] m-test .
big-formula m-test .
big-formula m-show .
