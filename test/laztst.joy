%INCLUDE stdlib.joy

DEFINE
swoncat == swap concat ;
prime == 2 [ over over dup * > 2 pick 2 pick rem 0 > and ] [ succ ] while dup * < ;
fib == [ 1 0 ] dip [ swap [ over + ] unary ] times popd ;
Uncons == uncons first i ;
Third == Rest Rest First ;
Take == [ dup Null ] [ pop pop [ ] ] [ [ Uncons ] dip pred ] [ cons ] linrec ;
Second == Rest First ;
Rest == rest first i ;
Powers-of-2 == 1 [ 2 * ] From-by ;
Ones == 1 [ ] From-by ;
Null == null ;
Naturals == 0 From ;
N-th == pred Drop First ;
Map == [ over Null ] [ [ ] ] [ [ Uncons ] dip dup swapd [ Map ] cons cons [ i ]
dip Cons ] ifte ;
From-to-by == [ dup [ From-to-by ] cons swapd cons [ dupd i ] dip cons Cons ]
[ [ 2 pick 2 pick > ] [ pop pop pop ] ] dip ifte ;
From-to == [ over over > ] [ pop pop [ ] ] [ [ dup succ ] dip [ From-to ] cons
cons Cons ] ifte ;
From-by == dupd dup [ i ] dip [ From-by ] cons cons Cons ;
From == dup succ [ From ] cons Cons ;
First == first ;
Filter == [ over Null ] [ [ ] ] [ dup [ [ i not ] cons [ dup first ] swoncat [
Rest ] while Uncons ] dip [ Filter ] cons cons Cons ] ifte ;
Evens == 0 [ 2 + ] From-by ;
Drop == [ Rest ] times ;
Cons == [ ] cons cons ;
END

0 setautoput .
"\nTesting lazy lists in the library lazlib.joy\n" putchars .
Naturals "(i(iy))" put_list nl .
Evens "(i(i(iy)y))" put_list nl .
Powers-of-2 "(i(i(iy)y))" put_list nl .
Naturals "(i(iy))" put_list nl .
Naturals Rest "(i(iy))" put_list nl .
Naturals Rest Rest "(i(iy))" put_list nl .
Naturals 2 Drop "(i(iy))" put_list nl .
Naturals 3 Drop "(i(iy))" put_list nl .
Ones "(i(i()y))" put_list nl .
Ones Rest "(i(i()y))" put_list nl .
Ones 10 Drop "(i(i()y))" put_list nl .
Evens First put_int nl .
Evens Second put_int nl .
Evens Third put_int nl .
Evens 3 N-th put_int nl .
Evens 4 N-th put_int nl .
Evens 10 Take put_list_int nl .
Powers-of-2 5 N-th put_int nl .
Powers-of-2 10 N-th put_int nl .
Powers-of-2 20 N-th put_int nl .
Powers-of-2 20 Drop "(i(i(iy)y))" put_list nl .
Powers-of-2 21 N-th put_int nl .
Powers-of-2 10 Take put_list_int nl .
Powers-of-2 5 Drop 5 Take put_list_int nl .
Ones 5 Take put_list_int nl .
Ones 5 Drop 5 Take put_list_int nl .
1.0 [ 1.1 .* ] From-by "(d(d(dy)y))" put_list nl .
1.0 [ 1.1 .* ] From-by Rest "(d(d(dy)y))" put_list nl .
1.0 [ 1.1 .* ] From-by Third put_dbl nl .
1.0 [ 1.1 .* ] From-by 10 Drop "(d(d(dy)y))" put_list nl .
1.0 [ 1.1 .* ] From-by 10 N-th put_dbl nl .
1.0 [ 1.1 .* ] From-by 10 Take put_list_dbl nl .
true [ not ] From-by "(b(b(y)y))" put_list nl .
true [ not ] From-by Third put_bool nl .
true [ not ] From-by 3 Drop "(b(b(y)y))" put_list nl .
true [ not ] From-by 10 Take put_list_bool nl .
"" [ 'a swons_str ] From-by 7 Take put_list_str nl .
[ ] [ [ ] cons ] From-by 7 Take "(()(())((()))(((())))((((()))))(((((())))))((((((())))))))" put_list nl .
'0 '9 From-to "(c(ccy))" put_list nl .
'0 '9 From-to Third put_char nl .
'0 '9 From-to 9 Drop "(c(ccy))" put_list nl .
'0 '9 From-to 9 Drop Null put_bool nl .
'0 '9 From-to 10 Drop "()" put_list nl .
'0 '9 From-to 10 Drop Null put_bool nl .
'0 '9 From-to 5 Take put_list_char nl .
'0 '9 From-to 10 Take put_list_char nl .
10 50 [ 3 + ] From-to-by "(i(ii(iy)y))" put_list nl .
10 50 [ 3 + ] From-to-by Third put_int nl .
Naturals [ dup * ] Map 10 Take put_list_int nl .
Naturals [ prime ] Filter 10 Take put_list_int nl .
Naturals [ fib ] Map [ 3 rem null ] Filter 10 Take put_list_int nl .
Naturals [ prime ] Filter [ dup * ] Map 10 Take put_list_int nl .
1000001 From "(i(iy))" put_list nl .
1000001 From [ prime ] Filter "(i((i(iy))(y)y))" put_list nl .
1000001 From [ prime ] Filter Third put_int nl .
1000001 From [ prime ] Filter 50 Take put_list_int nl .
