DEFINE
swoncat == swap concat ;
P3 == [ [ [ 1 2 ] [ 3 4 ] [ 5 ] [ ] ] [ [ dup * ] map ] map ] ;
P2 == [ [ 1 2 3 ] [ dup * ] map ] ;
P1 == [ 2 3 + dup * ] ;
P0 == [ ] .
HIDE
j2f-r == [ dup list ] [ [ [ swons ] swoncat ] dip [ j2f-r ] step [ ] swons ]
	 [ [ ] cons [ swoncat ] cons swoncat ] ifte ;
j2f-f == [ dup list ] [ [ [ [ ] ] concat ] dip [ j2f-f ] step [ [ ] cons
	 concat ] concat ] [ [ ] cons [ concat ] cons concat ] ifte ;
IN
j2f-reverse == [ ] swap [ j2f-r ] step [ ] swons ;
j2f-forwards == [ [ ] ] swap [ j2f-f ] step ;
END

P0 .
P0 j2f-forwards .
P0 j2f-forwards i .
P1 .
P1 j2f-forwards .
P1 j2f-forwards i .
P1 j2f-forwards i i .
P2 .
P2 j2f-forwards .
P2 j2f-forwards i .
P2 j2f-forwards i i .
P3 .
P3 j2f-forwards .
P3 j2f-forwards i .
P3 j2f-forwards i i .
P0 .
P0 j2f-reverse .
P0 j2f-reverse i .
P1 .
P1 j2f-reverse .
P1 j2f-reverse i .
P1 j2f-reverse i i .
P2 .
P2 j2f-reverse .
P2 j2f-reverse i .
P2 j2f-reverse i i .
P3 .
P3 j2f-reverse .
P3 j2f-reverse i .
P3 j2f-reverse i i .
P3 j2f-forwards j2f-reverse .
P3 j2f-forwards j2f-reverse i .
P3 j2f-forwards j2f-reverse i i .
P3 j2f-forwards j2f-reverse i i i .
