
DEFINE toc-repeat-sections == toc-ask-for-section [ dup 0 >= ] [ toc-do-section
toc-ask-for-section ] while
; toc-one-heading == toc-of-tutorial of second putchars newline newline
; toc-of-tutorial == [ [ [ sec0 ] "Interactive tutorial on JOY" ] [ [ sec1 ]
"1 - Numbers and Lists" ] [ [ sec2 ]
"2 - The map and filter combinators" ] [ [ sec3 ]
"3 - The ifte and linrec combinators" ] ]
; toc-do-section0 == newline 0 toc-one-heading "Contents:\n" putchars
toc-all-headings newline toc-of-tutorial first first i
; toc-do-section == toc-of-tutorial of first i
; toc-do-sec0-loop == toc-do-section0 toc-repeat-sections pop "Leaving  "
putchars 0 toc-one-heading "\nBye\n\n" putchars

; toc-ask-for-section == "\nTo repeat something, here are the sections again\n"
putchars toc-all-headings [
"Type the number of the section you want, or \n"
"type  0  to do all sections, or\n"
"type any other number (even negative) to quit.\n" ] putstrings
get-integer [ dup toc-of-tutorial size >= ] [ 0 swap - ] [ ] ifte
; toc-all-headings == toc-of-tutorial rest [ space space second putchars
newline ] step
; space == '\032 putch; second == rest first
; sec3 == 3 toc-one-heading ini-stats [
"Two more complicated combinators are the  ifte  and the  linrec\n"
"combinators.  The  ifte  combinator expects three quotation parameters\n"
"on the stack. In most cases they have been pushed just beforehand.\n" ]
putstrings [ get-integer 15 ] "5  [7 <]  [10 +]  [10 -]  ifte" q1 [
get-integer -2 ] "8  [7 <]  [10 +]  [10 -]  ifte" q1 [
"A programmer wants to write a recursive definition of the\n"
"factorial function, which has the form:\n" "    factorial ==\n"
"      ...                           (* first  quote *)\n"
"      ...                           (* second quote *)\n"
"      ...                           (* third  quote *)\n"
"      ifte\n" ] putstrings "What could be used as the first quote?\n"
putchars get-quote [ [ null ] [ 0 = ] [ 1 < ] ] expecting-from
"What could be used as the second quote?\n" putchars get-quote [ [ pop 1
] [ succ ] [ 1 + ] ] expecting-from "This question is harder:\n"
putchars "What could be used as the third quote?\n" putchars get-quote [
[ dup pred factorial * ] [ dup 1 - factorial * ] ] expecting-from [
"Later the programmer realises that the factorial function\n"
"is only needed in one place of the program, so it would be good\n"
"not to have the definition at all, by using the  linrec  combinator:\n"
"      [ null ]                       (* first  quote *)\n"
"      [ succ ]                       (* second quote *)\n"
"      ...                            (* third  quote *)\n"
"      ...                            (* fourth quote *)\n"
"      linrec\n" ] putstrings
"What could be used as the third quote ?\n" putchars get-quote [ [ dup
pred ] [ dup 1 - ] ] expecting-from
"What could be used as the fourth quote ?\n" putchars get-quote [ * ]
expecting put-stats
; sec2 == 2 toc-one-heading ini-stats [
"Combinators are similar to operators, they expect something\n"
"on the stack. But combinators always expect a quoted program\n"
"and perhaps something else. For example, the   map   combinator\n"
"expects a single program and below that an aggregate, e.g. a list.\n" ]
putstrings [ get-list [ 6 4 8 ] ] "[3 2 4] [dup +] map" q1 [ get-quote [
10 + ] ] "[13 12 14]" "[3 2 4]  ...  map" q2 [
"Another example is the   filter   combinator, which expects\n"
"a program that computes a truth value, and below that an aggregate.\n"
] putstrings [ get-list [ 5 3 7 ] ] "\n\t[5 16 3 7 14]  [10 <]  filter"
q1 "For the next question, provide the shortest answer\n" putchars [
get-quote [ 20 < ] ] "[15 19 12]"
"[5 10 9 11 2]  [10 +]  map   ...  filter" q2 put-stats
; sec1 == 1 toc-one-heading ini-stats [
"One of the data types in Joy is the type of integers.\n"
"Literal integers are written in ordinary decimal notation.\n"
"The usual binary operators are:  +  -  *  /\n"
"But these operators are written after their arguments.\n" ] putstrings
[ get-integer 5 ] "2  3  +" q1 [ get-integer 42 ] "7  6  *" q1 [
get-integer 37 ] "7  6  *  2  3  +  -" q1 [
"The most important aggregate datatype is that of lists.\n"
"These are written inside square brackets, like this:\n"
"        [42 17 3 9 35]\n" "Some important operators for lists are:\n"
"    first      rest      cons      concat\n" ] putstrings [ get-integer
5 ] "[5 4 2 7]  first" q1 [ get-list [ 4 2 7 ] ] "[5 4 2 7]  rest" q1 [
get-list [ 8 9 3 ] ] "8  [9 3]  cons" q1 [ get-list [ 5 3 5 3 ] ]
"[5 3]  dup  concat" q1 [ get-list [ [ 5 3 ] 5 3 ] ] "[5 3]  dup  cons"
q1 [ get-list [ 7 3 ] ] "[7 3 3 2 4]" "...  [3 2 4]  concat" q2
put-stats
; sec0 == toc-of-tutorial rest [ first i ] step
; q2 == "What will the dots   ...   have to be, so that\n\t" putchars putchars
"\nleaves    " putchars putchars "    on the stack ?\n" putchars i
expecting
; q1 == "What will the program   " putchars putchars
"   leave on the stack ?\n" putchars i expecting
; putstrings == [ putchars ] step
; put-stats == "You answered " putchars [ put ] dip "of the " putchars put
"questions correctly.\n\n" putchars
; praise == [ "Good." "Splendid." "Excellent." "Great." "Terrific." ] 0 at
putchars newline
; newline == '\n putch; joytut == toc-do-sec0-loop; ini-stats == 0 0
; get-quote == get [ dup list not ] [ pop "A quotation is expected:\n" putchars
get ] while
; get-list == get [ dup list not ] [ pop "A list is expected:\n" putchars get ]
while

; get-integer == get [ dup integer not ] [ pop "An integer is expected:\n"
putchars get ] while
; expecting-from == [ over over [ equal ] some ] [ pop pop praise [ succ ]
dip ] [ "No, the right answer must be one of the following:\n\t" putchars [ put
"  " putchars ] step pop newline ] ifte succ
; expecting == [ over over equal ] [ pop pop praise [ succ ] dip ] [
"No, the right answer is:  " putchars put pop newline ] ifte succ
.

joytut quit.
	hahaha
	1234
	42
	36
	5
	7
	[2 4 7]
	[  8  9   3    ]
	[ [5 3] 5 3]
	[ [5 3] 5 3]
	[73]

	[ 9 4  16]
	[ 10 + ]
	[5 3 7]
	[ 20 <]

	15
	-8
	[ 0 =]
	[ succ ]
	[ factorial *]
	[  dup  pred  ]
	[ * ]

	2

	[6 4 8]
	[ 10 +  ]
	[5 3 7]
	[ 20 <]

999
